from qiskit import QuantumCircuit, execute, Aer, IBMQ, ClassicalRegister, QuantumRegister
from qiskit.compiler import transpile, assemble
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from qiskit.quantum_info import Pauli, state_fidelity, basis_state, process_fidelity

if __name__ == "__main__":

    provider = IBMQ.load_account()
    backend = provider.get_backend('ibmq_5_yorktown')

    # Set up five quantum bits to be superpositioned and five classical bits for storing measurements
    circuit = QuantumCircuit(5,5)

    # Add Hadamard Gates to create entanglement
    circuit.h(0)
    circuit.h(1)
    circuit.h(2)
    circuit.h(3)
    circuit.h(4)

    # Measure - store measurements from quantum register in classical register
    circuit.measure([0, 1, 2, 3, 4], [0, 1, 2, 3, 4])

    shots = 1
    job = execute(circuit,backend,shots=shots,memory=True)

    result = job.result()
    memory = result.get_memory()

    diceResults = []

    # Print in comma delimited form for copy/paste into javascript vector and into Excel file for analysis
    print("Quantum numbers generated by quantum computers at IBM are: ")
    for x in range(0, shots):
       diceResults.append(int(memory[x],2))

    print(diceResults)